#+title: Emacs Configuration

*Emacs Config*

* Package system setup
#+BEGIN_SRC emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Clean up emacs and basics:
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (electric-indent-mode -1)

  (scroll-bar-mode -1)  ; Disable visible scrollbar
  (tool-bar-mode -1)    ; Disable the toolbar
  (tooltip-mode -1)     ; Disable tooltips
  (set-fringe-mode 10)  ; Give some breathing room
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq auto-window-vscroll nil)
  (setq scroll-conservatively 10000)
  ;; (setq scroll-margn 2)

  (menu-bar-mode -1)
  (setq visible-bell t)

  ;; Line numbers
  (global-display-line-numbers-mode 1)
  ;; Relative line numbers
  (setq display-line-numbers-type 'relative)
  (setq-default tab-width 4)
#+END_SRC

* Theming
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'monokai-pro t))
(set-face-attribute 'default nil :font "JetBrains Mono" :height 160)
#+END_SRC

* Packages
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1)
  )
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
  (define-key evil-insert-state-map (kbd "C-v") 'clipboard-yank)
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
  (require 'org)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "PROG(p)" "DONE(d)")))

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-SPC") 'org-todo)
  ;; (global-set-key (kbd "C-x C-t") 'org-latex-preview)
  (define-key global-map [(shift backspace)] 'org-mark-ring-goto)

  ;; (define-key global-map "\C-cl" 'org-store-link)
  ;; (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  (setq org-highest-priority ?A)  ; Define the highest priority (10)
  (setq org-lowest-priority ?C)   ; Define the lowest priority (1)
  (setq org-default-priority ?B)  ; Define the default priority (5)


#+END_SRC
Moreover, the setup for latex:
#+BEGIN_SRC emacs-lisp
  ;; latex
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq-default line-spacing 6)
#+END_SRC
*** Setting up capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      '(
        ("A" "algorithms" plain (file+headline "tasks.org" "Algorithms")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"algo\")")

        ("l" "linear optimization" plain (file+headline "tasks.org" "Linear Optimization")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"linOpt\")")

        ("s" "mathematical statistics" plain (file+headline "tasks.org" "Mathematical Statistics")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"mathStats\")")

        ("h" "honors" plain (file+headline "tasks.org" "CPPS Honors")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"honors\")")

        ("a" "automata" plain (file+headline "tasks.org" "Automata")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"automata\")")

        ("m" "masters" plain (file+headline "tasks.org" "Master's applications")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"masters\")")

        ("r" "resProj" plain (file+headline "tasks.org" "Research Projects")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"resProj\")")

        ("w" "waterproof" plain (file+headline "tasks.org" "Waterproof")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"waterproof\")")

        ("o" "others" plain (file+headline "tasks.org" "Others")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"others\")")

        ("p" "problems" plain (file+headline "tasks.org" "Programming problems")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"problems\")")

        ("B" "BEP" plain (file+headline "tasks.org" "BEP/SEP/Finishing bachelor")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"bep\")")

        ("G" "Graduation" plain (file+headline "tasks.org" "BEP/SEP/Finishing bachelor")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"grad\")")

        ("S" "SEP" plain (file+headline "tasks.org" "BEP/SEP/Finishing bachelor")
         "** TODO [#%^{Priority}]%? %(org-set-tags \"sep\")")

        ("d" "diary" plain (file+datetree "diary.org")
         "****%?  %<%H:%M>")
        ))

  (setq capture-files '("tasks.org"))
  ;; (setq capture-files '("masters.org" "others.org" "honors.org" "problems.org"
  ;;                       "automata.org" "researchProject.org" "waterproof.org"
  ;;                       "algorithms.org" "linOptimization.org" "mathStats.org"
  ;;                       ))

  (defun vulpea-capture-task ()
    "Capture a task."
    (interactive)
    (org-capture nil "t"))
#+END_SRC
*** Setting up org-agenda custom commands
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-window-setup 'only-window)
    (setq org-tags-match-list-sublevels 'indented)
    (setq org-agenda-custom-commands
        '((" " "Agenda"
           (
            (tags-todo "algo|linOpt|mathStats"
             ((org-agenda-overriding-header "Algo. || Lin. Opt. || Math. Stats."))
            )
            (tags-todo "honors|resProj"
             ((org-agenda-overriding-header "Honors || Research Project"))
             )
            (tags-todo "automata|waterproof"
             ((org-agenda-overriding-header "Automata || Waterproof"))
             )
            (tags-todo "others"
             ((org-agenda-overriding-header "Others"))
             )
            (tags-todo "masters"
             ((org-agenda-overriding-header "Masters"))
             )
            (tags-todo "bep|grad"
             ((org-agenda-overriding-header "BEP / SEP / Finishing bachelor"))
             )
            )
           )))

    (defun my-org-agenda-custom-keys ()
    (local-set-key (kbd "j") 'org-agenda-next-line)
    (local-set-key (kbd "k") 'org-agenda-previous-line)
    (local-set-key (kbd "h") 'backward-char)
    (local-set-key (kbd "l") 'forward-char)
    (local-set-key (kbd "TAB") 'org-agenda-follow-mode-toggle)
    (local-set-key (kbd "C-c o") 'full-calendar)
    )

  (add-hook 'org-agenda-mode-hook 'my-org-agenda-custom-keys)
#+END_SRC
*** calfw (calendar)
#+BEGIN_SRC emacs-lisp
  (defun date-earlier-p (date1 date2)`
    (time-less-p (date-to-time date1) (date-to-time date2)))
  (use-package calfw
   :defer t
   :bind (("C-c o" . full-calendar) 
          ("C-c t" . task-calendar))
   :commands cfw:open-calendar-buffer
   :functions (cfw:open-calendar-buffer
               cfw:refresh-calendar-buffer
               cfw:org-create-source
               cfw:cal-create-source)
   :config
   (defun full-calendar ()
     (interactive)
     (cfw:open-calendar-buffer
      :contents-sources
      (list
       (cfw:org-create-file-source "tasks" "~/org/tasks.org" "#34ed5c")
       (cfw:org-create-file-source "Schedule" "~/org/schedule.org" "#2377fc")
       (cfw:org-create-file-source "meetings" "~/org/meetings.org" "#ed3a2d")
       )
     ))
   (defun task-calendar ()
     (interactive)
     (cfw:open-calendar-buffer
      :contents-sources
      (list
       (cfw:org-create-file-source "tasks" "~/org/tasks.org" "#34ed5c")
       )
      ;; :sorter 'my-calendar-entry-comparator
     ))
   )
  (custom-set-faces
   '(cfw:face-title ((t (:foreground "#5E81AB" :weight bold :height 1.0 :inherit variable-pitch))))
   '(cfw:face-header ((t (:foreground "#ffffff" :weight bold ))))
   '(cfw:face-sunday ((t :foreground "#5E81AB" :weight bold )))
   '(cfw:face-saturday ((t :foreground "#5E81AB" :weight bold )))
   '(cfw:face-holiday ((t :foreground "#ba3c53" :background "grey10" :weight bold)))
   '(cfw:face-day-title ((t :background "#grey10" )))
   '(cfw:face-default-day ((t :foreground "#ffffff" :background "#grey10" )))
   '(cfw:face-today-title ((t :foreground "#ff001e" :background "#grey10" :weight bold)))
   '(cfw:face-today ((t :background: "grey10" :weight bold)))
   '(cfw:face-select ((t :background "#5E81AB")))
   '(cfw:face-toolbar ((t :background "#grey10")))
   ;; '(cfw:face-toolbar ((t :background "#5E81AB")))
   '(cfw:face-grid ((t :foreground "#5E81AB")))
   )
   (use-package calfw-org
     :after calfw)
   (setq calendar-week-start-day 1)
   (setq calendar-holidays
      '(
       ;; State holidays
       (holiday-fixed 1 1 "Fiesta Nacional: New Year")
       (holiday-fixed 1 6 "Fiesta Nacional: Dia de Reyes/Epifania")
       (holiday-fixed 5 1 "Fiesta Nacional: International Labor Day")
       (holiday-fixed 5 24 "Fiesta Nacional: Segunda Pascua")
       (holiday-fixed 6 24 "Fiesta Nacional: San Juan")
       (holiday-fixed 8 15 "Fiesta Nacional: Asuncion de la Virgen")
       (holiday-fixed 10 12 "Fiesta Nacional: Dia de la Hispanidad")
       (holiday-fixed 11 1 "Fiesta Nacional: Todos los Santos")
       (holiday-fixed 12 6 "Fiesta Nacional: Dia de la Constitucion")
       (holiday-fixed 12 8 "Fiesta Nacional: Inmaculada Concepcion")
       (holiday-fixed 12 25 "Fiesta Nacional: Catholic Christmas")
       ;; floated holidays       
       (holiday-easter-etc  -2 "Fiesta Nacional: Viernes Santo")
       (holiday-easter-etc  0 "Domingo de Ramos")
       (holiday-easter-etc  1 "Fiesta Local: Lunes de Pascua Florida")
       (holiday-easter-etc 50 "Fiesta Local: Lunes de Pascua granada:Lunes de pentecostes")
       ;; uni
       (holiday-fixed 9 29 "No teaching")
       (holiday-fixed 12 22 "No teaching")
       (holiday-fixed 1 2 "No teaching")
       (holiday-fixed 1 3 "No teaching")
       (holiday-fixed 1 4 "No teaching")
       (holiday-fixed 1 5 "No teaching")
       (holiday-fixed 2 12 "No teaching")
       (holiday-fixed 2 13 "No teaching")
       (holiday-fixed 2 14 "No teaching")
       (holiday-fixed 2 15 "No teaching")
       (holiday-fixed 2 16 "No teaching")
       (holiday-fixed 1 1 "TU/e Closed")
       (holiday-fixed 4 27 "TU/e Closed")
       (holiday-fixed 5 5 "TU/e Closed")
       (holiday-fixed 5 9 "TU/e Closed")
       (holiday-fixed 5 10 "TU/e Closed")
       (holiday-fixed 5 19 "TU/e Closed")
       (holiday-fixed 5 20 "TU/e Closed")
       ;; flights
       (holiday-fixed 12 21 "FLIGHT (Ams -> Mad) 19:00-21:40")
       (holiday-fixed 1 7 "FLIGHT (Mad -> Ein) 16:50-19:25")
       ))
#+END_SRC
*** olivetti mode
#+BEGIN_SRC emacs-lisp
;Olivetti config
(use-package olivetti
  :defer t
  :init  (setq olivetti-body-width .70))

(add-hook 'org-mode-hook 'olivetti-mode)
#+END_SRC
*** org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
	:after org
	:ensure t
	:init
       (setq org-roam-v2-ack t)
	:custom
	(org-roam-directory (file-truename "~/org/orgRoam"))
	(org-roam-capture-templates
	 '(("d" "default" plain
		"\n%?"
		:if-new (file+head "${slug}-%<%Y%m%d%H%H%S>.org" "#+STARTUP:latexpreview\n#+STARTUP:inlineimages\n #+date: %U\n #+title:${title}\n backlink:\n tags:\n* ${title}\n")
		:unnarrowed t)))
	:bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
	:config (org-roam-setup))

  (use-package org-roam-ui
	:after org-roam 
	:bind ("C-c n g" . org-roam-ui-open)
	:config
	(setq org-roam-ui-sync-theme t
		  org-roam-ui-follow t
		  org-roam-ui-update-on-save t
		  org-roam-ui-open-on-start t))
	(defun vulpea-buffer-prop-get (name)
	"Get a buffer property called NAME as a string."
	(org-with-point-at 1
	  (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
							   (point-max) t)
		(buffer-substring-no-properties
		 (match-beginning 1)
		 (match-end 1)))))

	(defun vulpea-agenda-category ()
	  (let* ((file-name (when buffer-file-name
						  (file-name-sans-extension
						   (file-name-nondirectory buffer-file-name))))
			 (title (vulpea-buffer-prop-get "title"))
			 (category (org-get-category)))
		(or (if (and
				 title
				 (string-equal category file-name))
				title
			  category)
			"")))


  (setq org-agenda-prefix-format '(
	   (agenda . "%-27b %-10T ")
	   (todo . "%-27b %-10T %-15(let ((scheduled (org-get-scheduled-time (point)))) (if scheduled (format-time-string \"%a %d-%m %H:%M\" scheduled) \"\")) ")
	   (tags . "%-27b %-10T %-15(let ((scheduled (org-get-scheduled-time (point)))) (if scheduled (format-time-string \"%a %d-%m %H:%M\" scheduled) \"\")) ")
	   (search. "%-27b %-10T %-15(let ((scheduled (org-get-scheduled-time (point)))) (if scheduled (format-time-string \"%a %d-%m %H:%M\" scheduled) \"\")) ")
	   ))
#+END_SRC
*** org-babel
#+BEGIN_SRC emacs-lisp
  ;;; Org babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)

  ;;; Org templates
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  
  ;;; set gb back to normal for memory reasons
  (setq gc-cons-threshold (* 50 1024 1024))
#+END_SRC
*** Setting up "smart" org-agenda
#+BEGIN_SRC emacs-lisp
  ;; Remove automatic project inheritance
  (add-to-list 'org-tags-exclude-from-inheritance "project")
#+END_SRC
We want to mark as "project" only the org-roam files containing TODO items to increase the speed of
org agenda.
Explanation:
   1. We parse the buffer. org-element-parse-buffer returns an abstract syntax tree of the current Org
   buffer. We only care about headings, hence the " 'headings ".
   2. We extract info. about TODO keywords from /headline/ AST, which contains a property we are interested
   in, -:todo-type., which returns the type of TODO: /'done/, /'todo/ or /nil/.
   3. Now we just check that there is at least one TODO match.
#+BEGIN_SRC emacs-lisp
  (defun vulpea-project-p ()
    "Return non-nil if current buffer has any todo entry.

  TODO entries marked as done are ignored, meaning the this
  function returns nil if current buffer contains only completed
  tasks."
    (org-element-map                          ; (2)
         (org-element-parse-buffer 'headline) ; (1)
         'headline
       (lambda (h)
         (eq (org-element-property :todo-type h)
             'todo))
       nil 'first-match))                     ; (3)
#+END_SRC
Now we use this function to add or remove the /project/ tag from nodes. We do this twice: when visiting a node,
and in /before-safe-hook/.
#+BEGIN_SRC emacs-lisp
	(defun vulpea-buffer-prop-get-list (name &optional separators)
	  "Get a buffer property NAME as a list using SEPARATORS.
	If SEPARATORS is non-nil, it should be a regular expression
	matching text that separates, but is not part of, the substrings.
	If nil it defaults to `split-string-default-separators', normally
	\"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
	  (let ((value (vulpea-buffer-prop-get name)))
		(when (and value (not (string-empty-p value)))
		  (split-string-and-unquote value separators))))
	(defun vulpea-buffer-prop-set (name value)
	"Set a file property called NAME to VALUE in buffer file.
  If the property is already set, replace its value."
	(setq name (downcase name))
	(org-with-point-at 1
	  (let ((case-fold-search t))
		(if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
							   (point-max) t)
			(replace-match (concat "#+" name ": " value) 'fixedcase)
		  (while (and (not (eobp))
					  (looking-at "^[#:]"))
			(if (save-excursion (end-of-line) (eobp))
				(progn
				  (end-of-line)
				  (insert "\n"))
			  (forward-line)
			  (beginning-of-line)))
		  (insert "#+" name ": " value "\n")))))

	  (defun vulpea-buffer-tags-get ()
		"Return filetags value in current buffer."
		(vulpea-buffer-prop-get-list "filetags" "[ :]"))
	  (defun vulpea-buffer-prop-remove (name)
		"Remove a buffer property called NAME."
		(org-with-point-at 1
				(when (re-search-forward (concat "\\(^#\\+" name ":.*\n?\\)")
									        (point-max) t)
	     (replace-match ""))))

	  (defun vulpea-buffer-tags-set (&rest tags)
		"Set TAGS in current buffer.
	  If filetags value is already set, replace it."
		(if tags
			(vulpea-buffer-prop-set
			 "filetags" (concat ":" (string-join tags ":") ":"))
		  (vulpea-buffer-prop-remove "filetags")))

		(defun vulpea-project-update-tag ()
			  "Update PROJECT tag in the current buffer."
			  (when (and (not (active-minibuffer-window))
						 (vulpea-buffer-p))
				(save-excursion
				  (goto-char (point-min))
				  (let* ((tags (vulpea-buffer-tags-get))
						 (original-tags tags))
					(if (vulpea-project-p)
						(setq tags (cons "project" tags))
					  (setq tags (remove "project" tags)))

					;; cleanup duplicates
					(setq tags (seq-uniq tags))

					;; update tags if changed
					(when (or (seq-difference tags original-tags)
							  (seq-difference original-tags tags))
					  (apply #'vulpea-buffer-tags-set tags))))))

		(defun vulpea-buffer-p ()
		  "Return non-nil if the currently visited buffer is a note."
		  (and buffer-file-name
			   (string-prefix-p
				(expand-file-name (file-name-as-directory org-roam-directory))
				(file-name-directory buffer-file-name))))

		(add-hook 'find-file-hook #'vulpea-project-update-tag)
		(add-hook 'before-save-hook #'vulpea-project-update-tag)
#+END_SRC
Lastly, to dynamically build /org-agenda-files/, we query all files containing the /project/ tag.
#+BEGIN_SRC emacs-lisp
  (defun vulpea-project-files ()
  "Return a list of note files containing 'project' tag." ;
  (seq-uniq
   (seq-map
    #'car
    (org-roam-db-query
     [:select [nodes:file]
      :from tags
      :left-join nodes
      :on (= tags:node-id nodes:id)
      :where (like tag (quote "%\"project\"%"))]))))

  (defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (vulpea-project-files))
  (setq org-agenda-files (append org-agenda-files capture-files))
  )

  (advice-add 'org-agenda :before #'vulpea-agenda-files-update)
  (advice-add 'org-todo-list :before #'vulpea-agenda-files-update)

  (dolist (file (org-roam-list-files))
  (message "processing %s" file)
  (with-current-buffer (or (find-buffer-visiting file)
                           (find-file-noselect file))
    (vulpea-project-update-tag)
    (save-buffer)))
#+END_SRC
*** Beautify org mode
#+BEGIN_SRC emacs-lisp
   (setq org-hide-emphasis-markers t)

     (font-lock-add-keywords 'org-mode
   '(("^ *\\([-]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

   ;; Change date format
   (setq-default org-display-custom-times t)
   (setq org-time-stamp-custom-formats '("<%d-%m-%Y %a>" . "<%d-%m-%Y %a %H:%M>"))

   ;; Improve org mode looks
   (setq org-startup-indented t
     org-pretty-entities t
     org-hide-emphasis-markers t
     org-startup-with-inline-images t
     org-image-actual-width '(300))
   (defun bb/org-mode-setup ()
     (org-indent-mode)
     ;;(org-startup-folded t)
     (variable-pitch-mode 1)
     (visual-line-mode 1)
     (setq evil-auto-indent nil))

   ;; Set faces for heading levels
   (dolist (face '((org-level-1 . 1.2)
                   (org-level-2 . 1.1)
                   (org-level-3 . 1.05)
                   (org-level-4 . 1.0)
                   (org-level-5 . 1.1)
                   (org-level-6 . 1.1)
                   (org-level-7 . 1.1)
                   (org-level-8 . 1.1)))
     (set-face-attribute (car face) nil :font "JetBrains Mono" :height (cdr face)))

   ;; Ensure that anything that should be fixed-pitch in Org files appears that way
   (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

   (defun bb/setup-buffer-face ()
     (setq buffer-face-mode-face '(:family "JetBrains Mono 16"))
     (buffer-face-mode)
     )
   (add-hook 'org-agenda-mode-hook 'bb/setup-buffer-face)


  (defun bb/after-org-mode-load ()
    (visual-line-mode)
    (vi-tilde-fringe-mode -1)

    (require 'org-indent)
    (org-indent-mode)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))

    (variable-pitch-mode 1)
   )
#+END_SRC
**** org-bullets
#+BEGIN_SRC emacs-lisp
  ;;; Org bullets
  (use-package org-bullets
    :after org
    :hook ((org-mode . org-bullets-mode))
    :custom (org-bullets-bullet-list '("◉" "○" "●" "○○" "●●" "○○○" "●●●")))

  ;;; autolist
  ;; (use-package org-autolist)
  ;; (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))
#+END_SRC
*** vulpea
#+BEGIN_SRC emacs-lisp
(use-package vulpea
  :ensure t
  ;; hook into org-roam-db-autosync-mode you wish to enable
  ;; persistence of meta values (see respective section in README to
  ;; find out what meta means)
  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))
#+END_SRC
** evil-nerd-commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+END_SRC
** golden-ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio)
  (golden-ratio-mode 1)
#+END_SRC
#** ivy
##+BEGIN_SRC emacs-lisp
#  (use-package ivy
#    :diminish
#    :bind (("C-s" . swiper)
#           :map ivy-minibuffer-map
#           ("RET" . ivy-alt-done)
#           ("TAB" . ivy-next-line)
#           ("<backtab>" . ivy-previous-line)
#           :map ivy-switch-buffer-map
#           ("RET" . ivy-done)
#           ("TAB" . ivy-next-line)
#           ("<backtab>" . ivy-previous-line)
#           :map ivy-reverse-i-search-map
#           ("RET" . ivy-done)
#           ("TAB" . ivy-next-line)
#           ("<backtab>" . ivy-previous-line))
#    :config
#    (ivy-mode 1))
#  (with-eval-after-load 'ivy
#    (define-key ivy-mode-map (kbd "S-<tab>") 'ivy-previous-line))
#
#
#
#  (use-package ivy-rich
#    :init
#    (ivy-rich-mode 1))
##+END_SRC
#** Company mode 
##+BEGIN_SRC emacs-lisp
#  (defun my-company-space-and-complete ()
#    "Select the current company candidate and insert a space."
#    (interactive)
#    (company-complete-selection)
#    (insert " "))
#
#  (use-package company
#    :after lsp-mode
#    :hook (lsp-mode . company-mode)
#    :bind (:map company-active-map
#          ("<backtab>" . company-select-previous-or-abort)
#          ("<tab>" . company-select-next-or-abort)
#          ("RET" . my-company-space-and-complete))
#    :custom
#    (company-minimum-prefix-length 1)
#    (company-idle-delay 0.0))
#  (add-hook 'after-init-hook 'global-company-mode)
#
#  (use-package company-box
#    :hook (company-mode . company-box-mode))
##+END_SRC
#** Magit 
##+BEGIN_SRC emacs-lisp
#  (use-package magit
#  :custom
#  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#
#;; NOTE: Make sure to configure a GitHub token before using this package!
#;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
#;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
#;; (use-package forge)
##+END_SRC
#** counsel
##+BEGIN_SRC emacs-lisp
#(use-package counsel
#  :bind (("C-M-j" . 'counsel-switch-buffer)
#         :map minibuffer-local-map
#         ("C-r" . 'counsel-minibuffer-history))
#  :config
#  (counsel-mode 1))
##+END_SRC
#** lsp-mode
##+BEGIN_SRC emacs-lisp
#(defun efs/lsp-mode-setup ()
#(setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
#(lsp-headerline-breadcrumb-mode))
#
#(use-package lsp-mode
#  :commands (lsp lsp-deferred)
#  :hook (lsp-mode . efs/lsp-mode-setup)
#  :init
#  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
#  :config
#  (lsp-enable-which-key-integration t))
##+END_SRC
#
#*** lsp-ui
##+BEGIN_SRC emacs-lisp
#(use-package lsp-ui
#  :hook (lsp-mode . lsp-ui-mode)
#  :custom
#  (lsp-ui-doc-position 'bottom))
##+END_SRC
#
#*** lsp-treemacs
##+BEGIN_SRC emacs-lisp
#(use-package lsp-treemacs
#  :after lsp)
##+END_SRC
#
#*** lsp-ivy
##+BEGIN_SRC emacs-lisp
#(use-package lsp-ivy)
##+END_SRC

