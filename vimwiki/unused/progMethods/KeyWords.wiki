- [ ] *Polymorphism*: fundamental concept in object-oriented programming that allows objects of different types to be treated as objects of a common type. 
      Example: animal class, with subclasses Dog and Cat (w/ makeSound method). makeSound can be called both on dog and cat and will work, although each will have
      a different implementation.
- [ ] *Overriding*: overriding methods
- [ ] *Encapsulation*: bundling of data and functions that operate on that data within a single unit or object. It provides a way to protect the data from outside 
      access/modification. Advantages: data protection, improved modularity, code reusability.
- [ ] *Dependency injection*: run-time configuring of functionality in A which is dependent on the method of some other class B. A does not know what the method 
      does, and that is chosen at runtime.

=== Composition vs. Inheritance ===
- [ ] *Composition*: create complex objects combining simple objects (has-a). We take a base class, and implement it into our new class.
      _Example_: We make tires, then a car which implements these tires (composition).
- [ ] *Inheritance*: objects inherit properties of a parent object and "extends" them (is-a), uses _extends_ in Java.
      _Example_: We make a person class, and then can have (sub)classes Employee and Student which inherit (and extend) Person.
      _implements_ in Java for interfaces.

The *benefits* of using composition over inheritance (though there are also disadvantages):
   - dynamic ( runtime/late) binding instead of static (compile time/early) binding gives more flexibility: hook methods can be varied at runtime (e.g. based on input)
   - easier to test the concrete hook methods, since they need not be bound into a subclass
   - the template method class, which makes it harder to access them in isolation;
   - easier to reuse concrete hook methods in other contexts
