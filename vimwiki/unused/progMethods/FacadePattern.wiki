= Facade =

The Facade design pattern adds another layer of abstraction to a complex or poorly designed subsystem.

JOptionPane is an example of a Facade class over the base Swing classes in the Java Class Library (to make GUI).

Intent: the intent of the Facade design pattern is to “provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that
makes the subsystem easier to use”:

There are 3 benefits to using the Facade design pattern:
- *Unification.* A Facade class defines a single point of access for clients. Clients deal with one class as opposed to a large interface or complex set of interfaces.
- *Abstraction and simplification.* The interface offered by the Facade design pattern is a level of abstraction above that of wrapped interface. This simplifies 
client code.
- *Decreased coupling.* A Facade class decouples clients from the details of the subsystem. Clients accessing the services of a subsystem through the Facade class are buffered from changes in the subsystem.

Facade design pattern is easy to understand and implement. It takes one single class to implement it, and it includes operations that provide a high-level interface onto an existing subsystem. These operations are implemented by delegating to lower-level components (usually classes) in the existing subsystem.

The Facade design pattern is often times used with the layered architecture style. One way to reduce coupling is to have clients access the services of a layer through one or more Facade classes. The more components there are within a layer, the greater the benefit of having a few well-defined access points.

Architectural patterns Table Data Gateway and Row Data Gateway are special cases of the Facade design pattern. They encapsulate the details of accessing the underlying database.

The Facade design pattern uses object decomposition and delegation, as do other design patterns such as Adapter, Bridge, Proxy and Decorator.
