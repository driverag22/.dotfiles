= Past exams =
== Final exams ==
=== With solutions === 
* [X] [[August 2022]] (Ans) - Adapter, Observer  #a8444ac0
* [X] [[./exams/Jan2020|January 2020]]  - Strategy alternative to Template  #56bff061
* [X] [[April 2016]] - Command + State UMLs, Iterator  #75921ceb
* [X] [[March 2016]] - Composite  #7a336121
* [X] [[April 2014]] kind of boring, lacks answers  #9faf66b2
=== Without solutions ===
- [ ] July 2018
- [X] [[April 2018]] - nice theory questions but no sols.
- [ ] April 2017
- [ ] August 2016
- [ ] July 2015
- [ ] April 2015

== Midterm exams ==
=== With solutions === 
- [X] Interim test I (Ans) - Contract, test cases, robustness/exceptions
- [X] Interim test II (Ans) - Template Method design pattern, ADTs (abs. func., rep. inv.)
- [X] Interim test III (Ans) - State design pattern, can appear in precondition

= General course material=

[[JavadocContracts|Example contracts]]

== Methods ==
Look over UML diagrams for each!
- [X] [[IntroDesPatterns|Intro. to design patterns]]
- [X] [[TDD]]
- [X] [[SingletonPattern|Singleton design pattern]] 
- [X] [[StrategyDesgPatter|Strategy design pattern]] - alt. to template January 2020
- [X] [[IteratorPattern|Iterator design pattern]]
- [X] [[TemplateMethodPattern|Template method design pattern]] - interim I
- [X] [[FactorDesignPattern|Factory method design pattern]]
- [X] [[ObserverPattern|Observer design pattern]] - Aug.2022
- [X] [[AdapterPattern|Adapter design pattern]] - Aug.2022 
- [X] [[DecoratorPattern|Decorator design pattern]]
- [X] [[CompositePattern|Composite design pattern]] - March 2016
- [X] [[FacadePattern|Facade design pattern]] - Used by SwingWorker
- [ ] [[CallbacksToDesignPatterns|Handout "From Callbacks to Design Patterns"]]
- [X] [[StateDesPattern|State design pattern]] - April 2016
- [X] [[ComandPattern|Command design pattern]] - Composite command, March 2016
      
== Other stuff ==
- [X] [[Principles]]
- [X] [[KeyWords]]
- [X] [[Robustness]]
- [X] [[StrategyAsTM|Strategy Design Pattern as alternative to Template Method]]
- [X] [[SwingWorker]]
- [X] [[ADTs]]
- [X] For any class U that is a subclass (possibly transitively) of a class T, U is not a subtype of T. A subclass that is not a subtype violates the Liskov 
      substitution principle (cannot be interchanged without affecting correctness of program)
- [X] Regression testing is not only done after new methods are added to the program, it can also be done after fixing defects, for example.
- [X] Testability benefits from functional decomposition.
