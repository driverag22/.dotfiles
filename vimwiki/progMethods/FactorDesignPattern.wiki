= Factory Method Design Pattern =

The factory method design pattern is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the 
type of objects that will be created.

The pattern consists of:
   - An abstract factory class that defines a factory method for creating objects
   - Concrete factory classes that extend the abstract factory class and provide an implementation for the factory method
   - An abstract product class that defines the interface for the objects that will be created 
   - Concrete product classes that extend the abstract product class and provide an implementation for the product interface 

The factory method defines a method for creating objects, but it defers the decision of which class of objects to create to the subclasses. The factory method is 
used to create an object, but the actual class of object that is created is determined by the concrete factory class.


_Example:_ 
{{{java
interface Shape {
    void draw();
}

class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Inside Rectangle::draw() method.");
    }
}

class Square implements Shape {
    @Override
    public void draw() {
        System.out.println("Inside Square::draw() method.");
    }
}

abstract class ShapeFactory {
    abstract Shape getShape(String shapeType);
}

class FactoryMethod extends ShapeFactory {
    @Override
    Shape getShape(String shapeType){
        if(shapeType.equalsIgnoreCase("RECTANGLE")){
            return new Rectangle();
        }else if(shapeType.equalsIgnoreCase("SQUARE")){
            return new Square();
        }
        return null;
    }
}
}}}

_Client code:_ 
{{{java
ShapeFactory shapeFactory = new FactoryMethod();
Shape shape1 = shapeFactory.getShape("rectangle");
shape1.draw();

Shape shape2 = shapeFactory.getShape("square");
shape2.draw();
}}}
