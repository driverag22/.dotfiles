= Template Method Design Pattern =

USES: 
  - *Inheritance*: abstract base class which provides a skeleton for the algorithm with the concrete classes providing the implementation details.
  - *Overriding*: concrete class provide their own implementation for some or all the steps in the algorithm defined by the abstract base class.
  - *Polymorphism*: client code can use the different concrete classes interchangebly.
PRINCIPLES:
  - *Dependency inversion principle* 
  - *Encapsulate what varies*
  - *Don't repeat yourself (DRY)*

The template method design pattern is a behavioral design pattern that defines the skeleton of an algorithm in a method, called the template method, and deferring some steps to subclasses. The template method pattern is a way to define an algorithm as a series of steps, with some of the steps being implemented by subclasses.

The pattern consists of:
   - an abstract base class that defines the template method and some concrete methods
   - concrete subclasses that implement the deferred methods

The template method defines the overall structure of the algorithm and uses the concrete methods, which are implemented by the subclasses. These methods are called 
"hooks" because they can be overridden by the subclasses but don't have to be. The abstract class can have 0, 1, or many hooks.

{{file:template1.png}}

_Example:_ 
{{{java
abstract class Game {
    abstract void initialize();
    abstract void startPlay();
    abstract void endPlay();

    //template method
    public final void play(){
        //initialize the game
        initialize();

        //start game
        startPlay();

        //end game
        endPlay();
    }
}

class Cricket extends Game {
    @Override
    void endPlay() {
        System.out.println("Cricket Game Finished!");
    }
    @Override
    void initialize() {
        System.out.println("Cricket Game Initialized! Start playing.");
    }
    @Override
    void startPlay() {
        System.out.println("Cricket Game Started. Enjoy the game!");
    }
}

class Football extends Game {
    @Override
    void endPlay() {
        System.out.println("Football Game Finished!");
    }
    @Override
    void initialize() {
        System.out.println("Football Game Initialized! Start playing.");
    }
    @Override
    void startPlay() {
        System.out.println("Football Game Started. Enjoy the game!");
    }
}
}}}

_Client code:_ 
{{{java
Game game = new Cricket();
game.play();

game = new Football();
game.play();
}}}
