1. 
  a) False, that would be a subtype.
  b) False
  c) True   - *FALSE*
  d) True
  e) False 
  f) Object diagram (b)
  g) Yes   - *NO* 

2. 
  a) T T T T   - *F T T T* 
  b) T F T F
  c) F T F T   - *T F T F* 
  d) F F T F 

3. 
  a) 
{{{java 
/**
 * Replaces each element of array a by the product of that element and the length of the string at the respecive index of array b.
 *
 * @param a   integer array to modify 
 * @param b   string array 
 * @pre {@code a != null && b != null && a.length == b.length && (\forall i; b.has(i); b[i] != null}
 * @modifies {@code a}
 * @post {@code (\forall i; a.has(i); a[i] = \old(a[i]) * b[i].length)}
 * @throws NullPointerException if {@code a == null || b == null || (\exists i; b.has(i); b[i] == null)}
 INSTEAD THEY HAVE FOR NullPointerException:
 * @throws NullPointerException if {@code a == null || b == null}
 * @throws IllegalArgumentException if {@code a.length != b.length}
 *
 */
void multiplyLength(int[] a, String[] b) throws NullPointerException, IllegalArgumentException {
    /****/
}
}}}
  b) The advantages of throwing a java exception instead of returning a special value:
     - Every values might be a possible output, so no values can be returned as _special_.
     - The programmer might forget to check for special values, while exceptions are harder to ignore.
     - With special values the client code needs to check for these special values, and maybe even propagate it to a higher call.
     - The exceptions can contain extra information.

4.  
  a) Why is it a good idea to write modular programs, give 5 reasons:
      1. Increased code readability (easier to understand code where there is less to read and descriptive function names are used instead).
      2. Increased code reusability (some modules might be useful for other programs)
      3. Easier to test the different components of the code and determine, if needed, which one is malfunctioning.
      4. Easier to evolve the code by changing only some of its modules/components.
      5. Easier to extend the code by adding more modules.
  *They give*:
      1. facilitates communication about design 
      2. facilitates independent construction by a team (not about parallel programming, but about programming in parallel)
      3. facilitates planning and progress tracking
      4. facilitates verifiability 
      5. facilitates maintainability
      6. facilitates reuse 
 
  b) Encapsulation is...
  *They give:*
  Encapsulation in ADT bundles and hides implementation details (data representation and operation implementations; using class mechanism), separate from 
  the ADT specification (using interface or abstract class mechanism) (+1).
  This makes it impossible for the client to directly depend on the implementation details (+1), and makes it possible to change the encapsulated details 
  (i.e. implementation) without affecting client code (+1).
  
    
5. 
  a) Iterator<T> holds state of a specific iteration over T. Iterable<T> is a collection over T which can be iterated over (with for-each statement which uses the
     factory method iterator()).
  b) An Iterator<T> can only iterate once over a collection. Iterable<T> can be reused for multiple iterations.
  c) Decorator. Since the behaviour of the Iterator is being modified while keeping the same interface.
  e) 
{{{java 
Duplicator<T> dupl1 = new Duplicator(iter1, 1);
while (dupl1.hasNext()) {
    T t = dupl1.next();
    doA(t);
    doA(t);
}

//Their solution:
Duplicator<T> dupl1 = new Duplicator(iter1, 2);
while (dupl1.hasNext()) {
    T t = dupl1.next();
    doA(t);
}
}}}


6. The DIP states that higher level modules should not depend on lower level modules and viceversa. Instead, higher level modules and lower level modules should 
   depend on an abstraction (+1).
   In the strategy design pattern, the abstract class holds the skeleton of the algorithm which class the different hook methods. These hook methods follow some 
   abstraction as to what they should be able to do. Similarly, the concrete class override and implement different hook methods, making sure that they still
   follow this abstraction. In this way, the abstract class holding the skeleton of the algorithm depends on an abstraction, and the hooks themshelves do as well.
    
   *MISSING*: 
     - Abstractions should not depend upon details, instead details should depend upon abstractions (+1).
     - In the Strategy Design Pattern, the DIP is satisfied because when using Strategy, client code depends on the abstract interface for an algorithm, without
       implementation. Concrete implementations of this interface are selectable at runtime (+1). The non-inverted dependency i.e. anti-pattern is to let client 
       code depend directly on concrete implementations of an algorithm.

7. Requires drawing :(
    
8. 
  a) Strategy design pattern as an alternative to the template method design pattern:
   
   Firstly, the hooks represent different 'strategies', and each hook is represented by a class (concrete step), subclass of an abstract class or 
   interface called, for example, _AbstractStep_.
 
   The alternative template method class gets a (polymorphic) instance variable for each step, with _AbstractStep_ as a type.
   In addition, its constructor (or setter) can be passed parametres of type _AbstractStep_ to initialize (set) the instance variables and 
   which define which strategies are run.
 
   Then, when calling the constructor (or setter) the client injects concrete steps into the instance, choosing which hooks it wants the algorithm to implement.
 
  b) It is easier to add and use hooks, since you do not need to create a whole new concreteStrategy, instead just a concrete step. Moreover, reusing steps and 
     strategies is easier as well.
    
    Clearly explains that when using the alternative Template Method based on composition, individual steps can be varied separately by the client thereby avoiding 
    a combinatorial explosion for the number of concrete subclasses needed in case of the traditional Template Method pattern. Compare this to the benefit of using
    composition over inheritance when implementing the Decorator design pattern.
    
    
    
    
