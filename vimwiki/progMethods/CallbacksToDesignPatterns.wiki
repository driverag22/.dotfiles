= Callbacks to Design Patterns=

Languages like C/C++ and Object Pascal (Delphi), you can pass a *function as a parameter* to another function. A function passed as a parameter is also known as a 
*callback*. The caller of A (function) provides A with a function through which it can invoke externally defined function (B). In a sense, A calls back to the 
environment from which it was called.

The Java Programming Language does not support function parameters, but we accomplish the same thing by putting the function as a method inside the class and passing 
an object of that class as parameter. For even more flexibility, we typically define an interface that contains the signature of the callback method.

Functionality A and concrete functionality B can then be independent of each other, both depending instead on the quite general interface FunctionalityB.

Methods:

- Defining an anonymous callback on the fly
- Wrapping a class to provide a callback
- Distributing a callback to other callbacks

Stopped at section 7. Modifying and Filtering Data as It Is Transferred
